#!/bin/sh
# Bootstrap system after fresh Arch install
# Note: first set up user account to run script

# Get input ---------------------------------------------------------------- {{{

check_pwsafe() {
    printf "Safe to display password on screen? (y/N): "
    read -r pwsafe_reply
    if [ "$pwsafe_reply" = "" ] || [ "$pwsafe_reply" = "n" ] || [ "$pwsafe_reply" = "N" ]; then
        pwsafe="n"
    elif [ "$pwsafe_reply" = "y" ] || [ "$pwsafe_reply" = "Y" ]; then
        pwsafe="y"
    else
        check_pwsafe
    fi
}

read_password_unsafe() {
  password="$(
    # always read from the tty even when redirected:
    exec < /dev/tty || exit # || exit only needed for bash

    # save current tty settings:
    tty_settings=$(stty -g) || exit

    # schedule restore of the settings on exit of that subshell
    # or on receiving SIGINT or SIGTERM:
    trap 'stty "$tty_settings"' EXIT INT TERM

    # disable terminal local echo
    stty -echo || exit

    # prompt on tty
    if [ "$1" = "2" ]; then
        printf "    Confirm password : " > /dev/tty
    else
        printf "    Password: " > /dev/tty
    fi

    # read password as one line, record exit status
    IFS= read -r password; ret=$?

    # display a newline to visually acknowledge the entered password
    echo > /dev/tty

    # return the password for $password
    printf '%s\n' "$password"
    exit "$ret"
  )"
}

read_password() {
    if [ ! "$pwsafe" = "y" ] && [ ! "$pwsafe" = "n" ]; then check_pwsafe; fi
    if [ "$pwsafe" = "y" ]; then
        printf "    Password: "
        read -r password
    elif [ "$pwsafe" = "n" ]; then
        read_password_unsafe "1"
        password_1=$password
        read_password_unsafe "2"
        password_2=$password
        if [ ! "$password_1" = "$password_2" ]; then 
            echo "Passwords do not match."
            read_password
        fi
    fi
}

echo "Enter password to import GPG key (or leave blank):"
read_password
gpg_password="$password"

echo "Enter email used for GPG key (not a password):"
read_password
gpg_email="$password"

echo "Enter password to decypt dotfiles (or leave blank):"
read_password
yadm_password="$password"

echo "Enter password to use for SSH key pair generation (or leave blank):"
read_password
ssh_password="$password"

# }}}

# Initial clean ------------------------------------------------------------ {{{

rm .bashrc
rm .bash_profile
rm .bash_logout

# }}}

# Configure pacman and yay ------------------------------------------------- {{{

# Basic packages to configure pacman
sudo pacman -Syu --noconfirm base-devel pacman-contrib

# Rank mirrors (from arch wiki)
sudo cp /etc/pacman.d/mirrorlist /etc/pacman.d/mirrorlist.backup
sudo awk '/^## Australia$/{f=1; next}f==0{next}/^$/{exit}{print substr($0, 1);}' /etc/pacman.d/mirrorlist.backup
rankmirrors -n 6 /etc/pacman.d/mirrorlist.backup | sudo tee /etc/pacman.d/mirrorlist

# Enable parallel downloads and multilib
if [ ! -f "/etc/pacman.conf.bak " ]; then cat /etc/pacman.conf > pacman.conf.bak; fi
cat /etc/pacman.conf | perl -0pe 's/#\[multilib\]\n#Include/[multilib]\nInclude/' | sed 's/^#\(ParallelDownloads.*\)/\1/' | sudo tee /etc/pacman.conf

# Refresh and install dependencies for script
sudo pacman -Syyuu --noconfirm
sudo pacman -Syu --noconfirm zsh gnupg openssh git yadm networkmanager perl rclone

# Install yay
git clone https://aur.archlinux.org/yay.git yay/
cd yay/ || exit
makepkg -si --noconfirm
cd ~ || exit
rm -rf yay/

# }}}

# GPG Keys ----------------------------------------------------------------- {{{

mkdir -p ~/.local/share/gnupg
export GNUPGHOME=~/.local/share/gnupg/
export GPG_AGENT_INFO=""

find . -name '*.key' -exec sh -c "echo ""$gpg_password"" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --allow-secret-key-import --import {}" \;
find . -name '*.asc' -exec sh -c "echo ""$gpg_password"" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --allow-secret-key-import --import {}" \;
find . -name 'pubring.kbx' -exec sh -c "echo ""$gpg_password"" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --import {}" \;
find . -name '*ownertrust.txt' -exec sh -c "echo ""$gpg_password"" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 --import-ownertrust {}" \;

# }}}

# Clone remotes ------------------------------------------------------------ {{{

# Add bootstrap key to ssh-agent
mv ~/ssh ~/.ssh
ssh -o StrictHostKeyChecking=no git@gitlab.com
eval "$(ssh-agent -s)"
ssh-add ~/.ssh/strap_rsa

# Clone repos
yadm clone git@gitlab.com:liamvdvyver/dotfiles-public.git

mkdir ~/git/
git clone git@gitlab.com:liamvdvyver/scripts.git ~/git/scripts/
git clone git@gitlab.com:liamvdvyver/dotfiles-secret.git ~/git/dotfiles-secret/
git clone git@gitlab.com:liamvdvyver/password-store.git ~/git/password-store/

# Decrypt secrets
echo "$yadm_password" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 -d ~/git/dotfiles-secret/archive | tar xvf -

# }}}

# Install software --------------------------------------------------------- {{{

# Make sure to install linux (-firmare -headers) base (-devel) networkmanager
sudo pacman -Sy --noconfirm
yay -S --noconfirm --norebuild --noredownload --ask 4 \
    xorg-server xorg-xinit xorg-xrandr xorg-xsetroot xorg-xinput xorg-xkill \
    xorg-xev xorg-xwininfo \
    xclip xwallpaper xdotool xdg-user-dirs xdg-ninja-git \
    i3-wm i3lock i3status \
    dmenu sxhkd flameshot dunst pass network-manager-applet \
    gnome-themes-extra noto-fonts ttf-hack-nerd papirus-icon-theme gruvbox-dark-icons-gtk \
    picom hsetroot qt5-styleplugins ueberzug scrot \
    arandr lxappearance \
    kitty \
    pulseaudio pulseaudio-alsa lib32-libpulse pavucontrol \
    qutebrowser pdfjs-legacy brave-bin lynx networkmanager \
    pcmanfm mpv sxiv zathura zathura-pdf-mupdf sxiv \
    exa man-db man-pages ripgrep wget \
    fd fzf tmux ranger dragon-drop \
    htop btop ncmpcpp newsboat mutt-wizard \
    mpd mpdris2 spotifyd spotify-tui-bin openssl-1.1 playerctl \
    perl-anyevent-i3 perl-image-exiftool perl-rename \
    r rstudio-desktop-bin gcc-fortran \
    python python-pip python-adblock \
    zsh-autosuggestions zsh-sudo-git zsh-syntax-highlighting \
    zsh-you-should-use \
    bash-complete-alias bash-completion \
    figlet pfetch \
    texlive-most biber \
    ytfzfim yt-dlp \
    jellyfin-bin makemkv \
    cuetools exact-audio-copy ffmpeg foobar2000 losslessaudiochecker mp3info \
    picard puddletag quodlibet sacd-extract \
    nicotine+ qbittorrent \
    android-file-transfer ntfs-3g \
    bridge-utils dnsmasq iptables-nft libvirt qemu-desktop vde2 virt-manager \
    calibre joplin-appimage libreoffice-still zoom \
    ledger-live-bin \
    neovim shellcheck shfmt ctags \
    cups epson-inkjet-printer-escpr \
    darktable gimp \
    nodejs npm yarn \
    calibre smartmontools wine-mono jdownloader2 unrar

pip install rtv pynvim

mkdir -p ~/.local/lib/R
Rscript -e "install.packages(c('pacman'))"

# }}}

# Configure software ------------------------------------------------------- {{{

# Bash
# TODO: test this
export HISTFILE="$XDG_DATA_HOME/bash_history"

# Ranger
ranger --copy-config=scope
git clone https://github.com/alexanderjeurissen/ranger_devicons ~/.config/ranger/plugins/ranger_devicons

# Neovim
nvim --headless -c 'autocmd User PackerComplete quitall'
nvim --headless -c 'PackerSync' -c 'q!'
rm ~/.Rprofile
nvim --headless -c 'MasonInstall r-languageserver' -c 'q!'
yadm restore ~/.Rprofile

# NetworkManager
sudo systemctl enable NetworkManager

# Google drive
rclone sync Drive: ~/drive

# KVM
sudo systemctl enable libvirtd
uname=$(whoami)
sudo usermod -aG libvirt "$uname"
cp /etc/libvirt/libvirtd.conf ~/libvirtd.conf.bak
sudo sed -i 's/#\(unix_sock_group = .libvirt.\)/\1/;s/#\(unix_sock_rw_perms = .0770.\)/\1/' /etc/libvirt/libvirtd.conf
cp /etc/libvirt/qemu.conf ~/qemu.conf.bak
sudo sed -i "s/#user = \"libvirt-qemu\"/user = $uname/;s/#group = \"libvirt-qemu\"/group = $uname/" /etc/libvirt/qemu.conf

# Calibre
cd ~ || exit
git clone https://github.com/PapirusDevelopmentTeam/papirus-calibre-theme.git
cd papirus-calibre-theme || exit
make build
make install
cd ~ || exit
rm -rf papirus-calibre-theme

# Set shell to ZSH
sudo chsh -s "$(which zsh)" "$(whoami)"

# }}}

# Generate SSH key pair ---------------------------------------------------- {{{

ssh-keygen -f ~/.ssh/id_rsa -N "$ssh_password"
cd ~/git/password-store/ || exit
ssh_pass="system/""$(hostnamectl --static)""-ssh"
echo "$ssh_password" > "$ssh_pass"
echo "$gpg_password" | gpg --batch --yes --pinentry-mode loopback --passphrase-fd 0 -r "$gpg_email" -e "$ssh_pass"
rm "$ssh_pass"
git add "$ssh_pass"".gpg"
git commit -m "Add given password for $ssh_pass to store.:"

# }}}

# Final clean and generate dirs -------------------------------------------- {{{

xdg-user-dirs-update
rm ~/.bash_history
rm ~/pacman.conf.bak
rm ~/libvirtd.conf.bak
rm ~/qemu.conf.bak
rm -r ~/ gpg
rm ~/strap

echo "Bootstrap completed."
echo "Install graphics drivers and reboot to complete setup."
read -p "Press enter to exit."

# }}}
